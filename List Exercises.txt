
https://www.oreilly.com/learning/how-do-i-use-the-slice-notation-in-python
# Create two lists to slice, the first is a numeric list from 1 to 9 (List A).
# The second is also a numeric list, from 0 to 9 (List B)

A = list(range(1,10,1)) # start,stop,step
B = list(range(9))

print("This is List A:",A)
print("This is List B:",B)


1. Exercise 1: Retrieve the first two elements from List A
Solution: print("The first two elements of A:",A[0:2], A[:2])


2.Exercise 2: Retrieve the last element of B with a negative number
Solution: B[-1]

3.Exercise 3: Retrieve 4,5,6 from A in two ways: using postive and negative number indices
Solution: 
print("Reading from left: ", A[3:6])
print("Reading from right: ", A[-6:-3])

4.Exercise 4: Go through list A from beginning to end in steps of 2.
print("Going through A in steps of 2 starting from first to last element: ", A[::2])


5.Exercise 5: Go through list A from the last to the first element in steps of 2

print("Going through A in steps of 2 starting from the last element: ",A[::-2])



## https://pynative.com/python-data-structure-exercise-for-beginners/
1.Given: 
	listOne = [3, 6, 9, 12, 15, 18, 21]
	listTwo = [4, 8, 12, 16, 20, 24, 28]
 Output: [6, 12, 18, 4, 12, 20, 28]

2. List = [54, 44, 27, 79, 91, 41]
Expected Outcome: [54, 44, 79, 27, 91, 41, 79]

3.sampleList = [1, 2, 3, 4, 5, 6, 7, 8, 9]
Expected Outcome:
	FirstList = [3, 2, 1]
	sampleList = [6, 5, 4]
	sampleList = [9, 8, 7]
	
4. Given:
	rollNumber = [47, 64, 69, 37, 76, 83, 95, 97]
	sampleDict ={'Jhon':47, 'Emma':69, 'Kelly':76, 'Jason':97}
	Delete element from rollNumber if not present in dictinary (value)
	
	Expected Outcome:

	after removing unwanted elemnts from list [47, 69, 76, 97]
	
5. Remove duplicate from list
sampleList = [87, 45, 41, 65, 94, 41, 99, 94]

Expected Outcome: unique items [87, 45, 41, 65, 99]


6.Write user defined exception.

7.What is instance variable,class variable?Difference between these two?

8.What is self in python?

9.Does python support private variable concepts? if yes how will you implement it.

10.What is the output of the following code?

def foo():
    try:
        print(1)
    finally:
        print(2)
foo()

11.What is the output of the following?

try:
    if '1' != 1:
        raise "someError"
    else:
        print("someError has not occurred")
except "someError":
    print ("someError has occurred")
	
	
12. What is the output of the code shown below?

def f(x):
    yield x+1
    print("test")
    yield x+2
g=f(10)
print(next(g))
print(next(g))


13.7. What is the output of the code shown below?

def getMonth(m):
    if m<1 or m>12:
        raise ValueError("Invalid")
    print(m)
getMonth(6)


14. What is the output of the following piece of code?

class Demo:
    def __init__(self):
        self.x = 1
    def change(self):
        self.x = 10
class Demo_derived(Demo):
    def change(self):
        self.x=self.x+1
        return self.x
def main():
    obj = Demo_derived()
    print(obj.change())
 
main()

15.	What is the output of the following code?

class Demo:
    def __init__(self):
        self.a = 1
        self.__b = 1
 
    def display(self):
        return self.__b
 
obj = Demo()
print(obj.__b)
a)	The program has an error because there isn’t any function to return self.a
b)	The program has an error because b is private and display(self) is returning a private member
c)	The program has an error because b is private and hence can’t be printed
d)	The program runs fine and 1 is printed


16. What is the output of the following code?

class fruits:
    def __init__(self):
        self.price = 100
        self.__bags = 5
    def display(self):
        print(self.__bags)
obj=fruits()
obj.display()
a)	The program has an error because display() is trying to print a private class member
b)	The program runs fine but nothing is printed
c)	The program runs fine and 5 is printed
d)	The program has an error because display() can’t be accessed

https://www.sanfoundry.com/python-questions-answers-encapsulation/
